if (data11$positive_frequency[i] > 100){
data11$freq_plus[i] = data11$positive_frequency[i] - 50
data11$freq_minus[i] = data11$negative_frequency[i] + 50 }else{
data11$freq_plus[i] = data11$positive_frequency[i] - 50
data11$freq_minus[i] = - (data11$negative_frequency[i] - 50)
}
}
if(data11$positive_frequency[i] < data11$negative_frequency[i]){
if (data11$negative_frequency[i] > 100){
data11$freq_plus[i] = - (data11$positive_frequency[i] + 50)
data11$freq_minus[i] = - (data11$negative_frequency[i] - 50 )}else{
data11$freq_plus[i] = data11$positive_frequency[i] - 50
data11$freq_minus[i] = - (data11$negative_frequency[i] - 50)
}
}
}
}
# Удаляем все строки, где и freq_minus, и freq_plus = NA
data11 = data11 %>% filter_at(vars(freq_minus,freq_plus), any_vars(!is.na(.)))
# Проверяем, если расчитанные частоты примерно равны (+-5) - изменяемый параметр, тогда расчитываем радиальную скорость (в направлении сканирования)
Calculate = data.frame()
Calculate = data11 %>% mutate('hour'= floor(data11$time/3600),
'x'= sin(2*pi*angle[data11$direct]/360),
'y'= cos(2*pi*angle[data11$direct]/360),
'V_rad'= NA
)
for(i in 1:nrow(Calculate)){
if(is.na(data11$freq_plus[i])){
Calculate$V_rad[i] = data11$freq_minus[i] * 3.24
}else if(is.na(data11$freq_minus[i])){
Calculate$V_rad[i] = data11$freq_plus[i] * 3.24
}else{
if(abs(data11$freq_plus[i] - data11$freq_minus[i]) <= 5){
Calculate$V_rad[i] = (data11$freq_plus[i] + data11$freq_minus[i])/2 * 3.24
}else{
Calculate[i,] = NA
}
}
}
# Удалим все пустые строки
Calculate = na.omit(Calculate)
# Считаем количество метеоров по часам
Quantity_in_hour = Calculate %>% group_by(hour) %>% summarise("Quantity_in_hour" = n())
# Проверяем: если количество метеоров за час < 5, тогда убираем данные из расчета
for(i in 1:nrow(Quantity_in_hour)){
if(Quantity_in_hour$Quantity_in_hour[i] < 5){
Calculate[which(Calculate$hour == Quantity_in_hour$hour[i] ), ] = NA
}
}
#Выбрасиваем все пустые строки
Calculate = na.omit(Calculate)
# Пересчитываем количество метеоров по часам
Quantity_in_hour = Calculate %>% group_by(hour) %>% summarise("Quantity_in_hour" = n())
Quantity_in_derection_by_hour = Calculate %>% group_by(hour,direct) %>% summarise("Quantity_in_derection" = n())
# Расчитываем скорости U  Y Уточнить: что за группировка по направлениям
Speed = Calculate %>% group_by(hour) %>%
group_map((~solve(t(cbind(.x$x,.x$y))%*%cbind(.x$x,.x$y))%*%
t(cbind(.x$x,.x$y))%*%.x$V_rad)) %>% unlist() %>% round(6)  # U Y
for(i in 1:length(Speed)){
if (Speed[i] > 100)Speed[i] = NA
}
#Погрешность расчетов:
for (i in 1:length(unique(Calculate$hour))){
V = Calculate %>% group_by(hour) %>%
group_map((~.x$V_rad - cbind(.x$x,.x$y) %*%
rbind(Speed[1+2*(i-1)],Speed[2+2*(i-1)])))
}
sigma2 = c()
Delta = list()
# Вспомогательное выражение
help = cbind(Calculate$x,Calculate$y)
for (i in 1:length(V)){
sigma2[i] = (t(V[[i]]) %*% V[[i]])/(length(V[[i]])-2) # U Y
Delta [[i]] = round(sqrt(sigma2[i] * diag(solve(t(help)%*%help))),6)  # U+ Y+
}
q = nrow(Quantity_in_hour)
WRITE = Quantity_in_hour %>% mutate("U" = Speed[seq(from = 1, to = length(Speed), by = 2)],
"Delta U" = unlist(Delta)[seq(from = 1, to = length(unlist(Delta)), by = 2)],
"Y" = Speed[seq(from = 2, to = length(Speed), by = 2)],
"Delta Y" = unlist(Delta)[seq(from = 2, to = length(unlist(Delta)), by = 2)],
"Date" = Calculate$file[1:q])
# Функция, которая вставляет строку между строками дата фрейма
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
# Заполнение пропусков
if (nrow(WRITE)!=24){
if (WRITE$hour[1] != 0){
WRITE =  insertRow(WRITE, c(0, rep(NA,length(WRITE)-1)),1)
}
# if (WRITE$hour[nrow(WRITE)] != 23){
#   WRITE[24,] = c(23, rep(NA,length(WRITE)-1))
# }
#
for (i in 1:23){
if(!((WRITE$hour[i] + 1) == WRITE$hour[i+1]) ||is.na(((WRITE$hour[i] + 1) == WRITE$hour[i+1]))){
WRITE = insertRow(WRITE, c(WRITE$hour[i] + 1, rep(NA,length(WRITE)-1)),i+1)
}
print(WRITE$hour[i+1])
}
if((nrow(WRITE) > 24) | (WRITE$hour[24] = 23)){
WRITE = WRITE[1:24,]
}
}
# Записать в файл номер часа, кол-во метеоров, скорость  U, погрешность, Y, погрешность,
file_name = paste0(as.character(WRITE  %>% select(Date) %>% filter(!is.na(.)) %>% head(1)) %>% substr(1,6), ".txt")
write.table(t(as.data.frame(names(WRITE))), file = file_name,col.names = FALSE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t" )
write.table(WRITE, file = file_name,col.names = FALSE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   " )
# Гармонический анализ
big_data <- read.table(file = choose.files(), stringsAsFactors = FALSE, header = TRUE)
garm_analiz = function(big_data, garmoniki = c(8,12,24)){ # big_data - значение скоростей за 48 часов.garmoniki - 12 и 24 часа по умолчанию
big_data = c('201903.txt') #- Файл с расчетами за месяц
# в файлы помимо номера часа нужно указывать дату из названия файлов с данными для обработки
#DATA = read.table(file = big_data, header = TRUE,  sep = "\t",stringsAsFactors = FALSE, na.strings = "   NA")
omega = 2*pi/garmoniki
DATA = read.table(file = big_data, header = TRUE,  sep = "\t",stringsAsFactors = FALSE, na.strings = "   NA")
names(DATA) = c("hour", "Quantity", "U", "Delta U","Y","Delta Y")
#  DATA = data.frame("hour" = c(0:23,0:23,0:23),
#                    "Quantity" = sample(0:100,72, replace = T),
#                    "U" = sample(0:10,72, replace = T),
#                    "Delta U" = sample(0:10,72, replace = T),
#                    "Y" =  sample(0:10,72, replace = T),
#                    "Delta Y" = sample(0:10,72, replace = T))
if(length(DATA) < 48){
message("Мало данных")
Data = data.frame("Day" = c(1),"hour" = t[24],"Средняя скорость" = NA,
"А8" = NA,
"А12" = NA,
"А24" = NA,
"fi1" = NA,
"fi2" = NA,
"fi3" = NA,row.names = NULL)
write.table( Data, file = 'ГА для U.txt',col.names = TRUE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   ")
write.table( Data, file = 'ГА для Y.txt',col.names = TRUE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   ")
}
for (i in 1:(nrow(DATA) - 48 + 1)){
t = DATA$hour[c((i):(i+47))]
data_to_calc = DATA[c(i:(i+47)),][-c(1,2,4,6)]
if(nrow(na.omit(data_to_calc)) < 36){
Data = data.frame("Day" = c(1),"hour" = t[24],"Средняя скорость" = NA,
"А8" = NA,
"А12" = NA,
"А24" = NA,
"fi1" = NA,
"fi2" = NA,
"fi3" = NA,row.names = NULL)
write.table( Data, file = 'ГА для U.txt',col.names = TRUE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   ")
write.table( Data, file = 'ГА для Y.txt',col.names = TRUE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   ")
}else{
A = matrix(nrow = nrow(na.omit(data_to_calc)), ncol = length(garmoniki)*2 + 1)
# Изменить.Нужно убрать только те строки, где полностью все NA.  Нельзя использовать na.omit, ведь только скорость может быть Na и в этом случае нужно проводить расчет для другой скорости
N = nrow(na.omit(data_to_calc))
A[,1] = 1
for (j in 1:N){
for (p in 1:length(garmoniki)){
A[j,p*2] = cos(omega[p]*t[j])
A[j,p*2+1] = sin(omega[p]*t[j])
}
}
Y = as.matrix(na.omit(data_to_calc))
Tetta = solve(t(A)%*%A)%*%t(A)%*%Y
Amplituda = matrix(ncol = 2, nrow = length(garmoniki))
fi= matrix(ncol = 2, nrow = length(garmoniki))
#names(Amplituda) = c("U", "Y")
Speed_avg = round(Tetta[1,],6)
for (f in seq(from=2, to=nrow(Tetta), by=2)){
Amplituda [(f-f/2),] = round(sqrt(Tetta[f,]^2 +Tetta[f+1,]^2),6)
fi[(f-f/2),] = as.vector(round(atan(Tetta[f+1,]/Tetta[f,]),6))
}
# Ошибка опредеения параметров
V_GA = Y - A%*%Tetta
sigma2_GA = c()
for(y in 1:2){
sigma2_GA[y] = t(V_GA[,y])%*%V_GA[,y]/(nrow(na.omit(DATA))-2*length(garmoniki)-1)
}
#sigma2 <- as.data.frame(as.vector(sigma2))
#colnames(sigma2) = colnames(Tetta)
#Ковариационная матрица
# S2 = data.frame(row.names = c("A0","A1*cosfi1","A1*sinfi1","A2*cosfi2","A1*sinfi2"))
S2 <- matrix(nrow = length(garmoniki)*2 + 1, ncol = 2)
for (k in 1: length(sigma2_GA)){
S2[,k] = diag(sigma2_GA[k]*solve(t(A)%*%A))
}
#colnames(S2) = colnames(Tetta)
# Ошибки амплитуд
delta_Speed_avg = round(sqrt(S2[1,]),6)
delta_Amplituda = matrix(nrow = length(garmoniki), ncol = 2)
for (m in seq(from=2, to=nrow(Tetta), by=2)){
delta_Amplituda[m-m/2,] = round(sqrt((Tetta[m,]^2 * S2[m,] + Tetta[m+1,]^2 * S2[m+1,])/(Tetta[m,]^2 + Tetta[m+1,]^2)),6)
}
Data = data.frame("Средняя скорость" = Speed_avg,
"А8" = Amplituda[1,],
"А12" = Amplituda[2,],
"А24" = Amplituda[3,],
"fi1" = fi[1,],
"fi2" = fi[2,],
"fi3" = fi[3,],row.names = NULL) %>% mutate("Day" = c(1),"hour" = t[24])
print(i)
message(t[24])
# Data = data.frame("Средняя скорость" = Speed_avg,
#                   "А8" = Amplituda[1,],
#                   "Погрешность_А8" = delta_Amplituda[1,],
#                   "А12" = Amplituda[2,],
#                   "Погрешность_А12" = delta_Amplituda[2,],
#                   "А24" = Amplituda[3,],
#                   "Погрешность_А24" = delta_Amplituda[3,],
#                   "fi1" = fi[1,],
#                   "fi2" = fi[2,],
#                   "fi3" = fi[3,],row.names = NULL)
# перевод в датафрейм для наглядности
#  Amplituda <- as.data.frame(t(Amplituda))
# colnames(Amplituda) = c("A1","A2")
#
# fi <- as.data.frame(t(fi))
# colnames(fi) = c("fi1","fi2")
#Посмотреть, что не так с циклом!!!
write.table( Data[1,],file = 'ГА для U.txt',col.names = TRUE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   ")
write.table( Data[2,],file = 'ГА для Y.txt',col.names = TRUE, append = TRUE, row.names = FALSE, quote = FALSE, sep = "\t   ")
}
}
}
dataset_path = "Хорошие/Хорошие"
predata = list()
data = list("amp" = list(), "time" = c(), "direct" = c(), "dist" = c())
for (filename in list.files(dataset_path, pattern = "res",all.files = TRUE)){
name = ((strsplit(filename, "_") %>% unlist())[5] %>% strsplit(".res"))[1] %>% unlist()
predata[[name]] = read.table(paste0(dataset_path,filename), sep = "\n", stringsAsFactors = FALSE)
amount_of_records = length(grep("амплитуды",predata[[name]]$V1))
amount_of_already_observed_records = length(data[['amp']])
for (record in 1:amount_of_records){
record_id = amount_of_already_observed_records + record
data[['amp']][[record_id]] =
(strsplit(predata[[name]]$V1[grep("амплитуды",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,2)] %>% as.integer()
hhmmss = (strsplit(predata[[name]]$V1[grep("время",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,3,5,7:14)] %>% as.double() #hours, minutes, seconds
data[['time']][record_id] = hhmmss[1]*3600+hhmmss[2]*60+hhmmss[3]
data[['direct']][record_id] =
strsplit((strsplit(predata[[name]]$V1[grep("направление",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:8,10:14)],";") %>% as.integer()
data[['dist']][record_id] = (strsplit(predata[[name]]$V1[grep("начало импульса",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:3)] %>% as.double()
data[['width']][record_id] = (strsplit(predata[[name]]$V1[grep("ширина импульса",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,2,4:6)] %>% strsplit(";") %>% as.integer()
data[['length']][record_id] = (strsplit(predata[[name]]$V1[grep("длина",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:8)]  %>% as.integer()
data[['positive_frequency']][record_id] = (strsplit(predata[[name]]$V1[grep("частота допплера+",predata[[name]]$V1, fixed = TRUE)[record]]," ") %>%
unlist())[-c(1:2)]  %>% as.double()
data[['negative_frequency']][record_id] = (strsplit(predata[[name]]$V1[grep("частота допплера-",predata[[name]]$V1, fixed = TRUE)[record]]," ") %>%
unlist())[-c(1:2)]  %>% as.double()
data[['file']][record_id] = name
}
}
n = length(data[[1]])
amps = data[[1]] %>% as.data.frame(col.names = c(1:n))
dataset_path = "Хорошие/Хорошие/"
predata = list()
data = list("amp" = list(), "time" = c(), "direct" = c(), "dist" = c())
for (filename in list.files(dataset_path, pattern = "res",all.files = TRUE)){
name = ((strsplit(filename, "_") %>% unlist())[5] %>% strsplit(".res"))[1] %>% unlist()
predata[[name]] = read.table(paste0(dataset_path,filename), sep = "\n", stringsAsFactors = FALSE)
amount_of_records = length(grep("амплитуды",predata[[name]]$V1))
amount_of_already_observed_records = length(data[['amp']])
for (record in 1:amount_of_records){
record_id = amount_of_already_observed_records + record
data[['amp']][[record_id]] =
(strsplit(predata[[name]]$V1[grep("амплитуды",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,2)] %>% as.integer()
hhmmss = (strsplit(predata[[name]]$V1[grep("время",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,3,5,7:14)] %>% as.double() #hours, minutes, seconds
data[['time']][record_id] = hhmmss[1]*3600+hhmmss[2]*60+hhmmss[3]
data[['direct']][record_id] =
strsplit((strsplit(predata[[name]]$V1[grep("направление",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:8,10:14)],";") %>% as.integer()
data[['dist']][record_id] = (strsplit(predata[[name]]$V1[grep("начало импульса",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:3)] %>% as.double()
data[['width']][record_id] = (strsplit(predata[[name]]$V1[grep("ширина импульса",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,2,4:6)] %>% strsplit(";") %>% as.integer()
data[['length']][record_id] = (strsplit(predata[[name]]$V1[grep("длина",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:8)]  %>% as.integer()
data[['positive_frequency']][record_id] = (strsplit(predata[[name]]$V1[grep("частота допплера+",predata[[name]]$V1, fixed = TRUE)[record]]," ") %>%
unlist())[-c(1:2)]  %>% as.double()
data[['negative_frequency']][record_id] = (strsplit(predata[[name]]$V1[grep("частота допплера-",predata[[name]]$V1, fixed = TRUE)[record]]," ") %>%
unlist())[-c(1:2)]  %>% as.double()
data[['file']][record_id] = name
}
}
n = length(data[[1]])
amps = data[[1]] %>% as.data.frame(col.names = c(1:n))
View(data)
filename
dataset_path = "/Хорошие/Хорошие/"
predata = list()
data = list("amp" = list(), "time" = c(), "direct" = c(), "dist" = c())
for (filename in list.files(dataset_path, pattern = "res",all.files = TRUE)){
name = ((strsplit(filename, "_") %>% unlist())[5] %>% strsplit(".res"))[1] %>% unlist()
predata[[name]] = read.table(paste0(dataset_path,filename), sep = "\n", stringsAsFactors = FALSE)
amount_of_records = length(grep("амплитуды",predata[[name]]$V1))
amount_of_already_observed_records = length(data[['amp']])
for (record in 1:amount_of_records){
record_id = amount_of_already_observed_records + record
data[['amp']][[record_id]] =
(strsplit(predata[[name]]$V1[grep("амплитуды",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,2)] %>% as.integer()
hhmmss = (strsplit(predata[[name]]$V1[grep("время",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,3,5,7:14)] %>% as.double() #hours, minutes, seconds
data[['time']][record_id] = hhmmss[1]*3600+hhmmss[2]*60+hhmmss[3]
data[['direct']][record_id] =
strsplit((strsplit(predata[[name]]$V1[grep("направление",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:8,10:14)],";") %>% as.integer()
data[['dist']][record_id] = (strsplit(predata[[name]]$V1[grep("начало импульса",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:3)] %>% as.double()
data[['width']][record_id] = (strsplit(predata[[name]]$V1[grep("ширина импульса",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1,2,4:6)] %>% strsplit(";") %>% as.integer()
data[['length']][record_id] = (strsplit(predata[[name]]$V1[grep("длина",predata[[name]]$V1)[record]]," ") %>%
unlist())[-c(1:8)]  %>% as.integer()
data[['positive_frequency']][record_id] = (strsplit(predata[[name]]$V1[grep("частота допплера+",predata[[name]]$V1, fixed = TRUE)[record]]," ") %>%
unlist())[-c(1:2)]  %>% as.double()
data[['negative_frequency']][record_id] = (strsplit(predata[[name]]$V1[grep("частота допплера-",predata[[name]]$V1, fixed = TRUE)[record]]," ") %>%
unlist())[-c(1:2)]  %>% as.double()
data[['file']][record_id] = name
}
}
filename
list.files(dataset_path, pattern = "res",all.files = TRUE)
dataset_path = "Хорошие/Хорошие/"
list.files(dataset_path, pattern = "res",all.files = TRUE)
dataset_path = "Хорошие/Хорошие"
list.files(dataset_path, pattern = "res",all.files = TRUE)
dataset_path = "Хорошие/"
list.files(dataset_path, pattern = "res",all.files = TRUE)
runApp('Liza_dip')
runApp('Liza_dip')
library(readr)
runApp('Liza_dip')
runApp('Liza_dip')
read_table("test.txt")
read_table("test.txt", sep = ";")
read_table("test.txt")
read_table("test.txt", col_names = FALSE)
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp()
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp()
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp()
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
a <- read.table('201903.txt')
a <- read.table('201903.txt', header = TRUE)
a <- read.table('201903.txt', col.names = TRUE)
a <- read.fwf('201903.txt')
a <- read.fwf('201903.txt', rep(20,7) )
View(a)
runApp('Liza_dip')
read.table(file = choose.files(), sep = " ")
read_table(file = choose.files())
read.table(file = choose.files(), sep = " ", header = TRUE)
read.table(file = choose.files(), sep = " ", header = TRUE)
read_table(file = choose.files())
read_table(file = choose.files(), col_names = TRUE)
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp()
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
data <- read_table2(file = choose.files())
data
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
data <- read_table2(choose.files())
str(data)
data$"time"
colnames(data) = c("time", "direct", "dist", "width", "len", "pf", "nf", "f")
data$time
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
data$dist %>% min()
data$dist %>% max()
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
install.packages("patchwork")
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
Date("01-01-2020")
as.Date("01-01-2020")
as.Date("01-01-2020", format = "%d-%m-%Y")
class(as.Date("01-01-2020", format = "%d-%m-%Y"))
as.Date("01-01-2020", format = "%d-%m-%Y") %>% format("%d-%m-%Y")
Sys.Date()
Sys.Date() %>% format("%d-%m-%Y")
runApp('Liza_dip')
runApp('Liza_dip')
Sys.Date() %>% class()
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
runApp('Liza_dip')
